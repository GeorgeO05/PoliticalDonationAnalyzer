var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import PropTypes from 'prop-types';
import HeatmapOverlay from 'leaflet-heatmap';
import { Layer } from 'rc-leaflet';
var propTypes = {
    backgroundColor: PropTypes.string,
    gradient: PropTypes.object,
    radius: PropTypes.number,
    opacity: PropTypes.number,
    maxOpacity: PropTypes.number,
    minOpacity: PropTypes.number,
    blur: PropTypes.number,
    scaleRadius: PropTypes.bool,
    useLocalExtrema: PropTypes.bool,
    onExtremaChange: PropTypes.func
};
var HeatLayer = /** @class */ (function (_super) {
    __extends(HeatLayer, _super);
    function HeatLayer(props, context) {
        var _this = _super.call(this, props, context) || this;
        var data = props.points, max = props.dataMax, min = props.dataMin;
        if (data && data.length) {
            _this.instance.setData({ data: data, max: max, min: min });
        }
        return _this;
    }
    HeatLayer.prototype.componentDidUpdate = function (prevProps) {
        var prevData = prevProps.points, prevMax = prevProps.dataMax, prevMin = prevProps.dataMin, prevOptions = __rest(prevProps, ["points", "dataMax", "dataMin"]);
        var _a = this.props, _b = _a.points, data = _b === void 0 ? [] : _b, max = _a.dataMax, min = _a.dataMin, options = __rest(_a, ["points", "dataMax", "dataMin"]);
        var changed = false;
        for (var _i = 0, _c = Object.keys(propTypes); _i < _c.length; _i++) {
            var key = _c[_i];
            if (options[key] !== prevOptions[key]) {
                changed = true;
                break;
            }
        }
        if (changed) {
            this.instance._heatmap.configure(__assign({ valueField: 'value' }, options, { xField: 'x', yField: 'y' }));
        }
        if (data !== prevData || max !== prevMax || min !== prevMin) {
            this.instance.setData({ data: data, max: max, min: min });
        }
        _super.prototype.componentDidUpdate.call(this, prevProps);
    };
    HeatLayer.prototype.createInstance = function (props) {
        var points = props.points, dataMax = props.dataMax, dataMin = props.dataMin, options = __rest(props, ["points", "dataMax", "dataMin"]);
        return new HeatmapOverlay(__assign({ valueField: 'value' }, options));
    };
    HeatLayer.propTypes = __assign({}, Layer.propTypes, { points: PropTypes.arrayOf(PropTypes.shape({ lat: PropTypes.number.isRequired, lng: PropTypes.number.isRequired, value: PropTypes.number })), dataMax: PropTypes.number, dataMin: PropTypes.number }, propTypes);
    HeatLayer.defaultProps = {
        radius: 0.002,
        scaleRadius: true
    };
    return HeatLayer;
}(Layer));
export default HeatLayer;
